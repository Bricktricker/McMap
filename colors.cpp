#include "colors.h"
#include "pngreader.h"
#include "globals.h"
#include <fstream>
#include <iostream>
#include <map>
#include "json.hpp"

using nlohmann::json;

std::map<std::string, Tree<std::string, uint16_t>> blockTree; //Maps blockState to id
RangeMap<uint16_t, Color_t> colorMap; //maps id to color_t
//This beast maps old blockid:meta to new states to save them in terrain array
const std::map<uint16_t, uint16_t> metaToState{ { 0U,0U },{ 1U,1U },{ 4097U,2U },{ 8193U,3U },{ 12289U,4U },{ 16385U,5U },{ 20481U,6U },{ 24577U,7U },{ 2U,9U },{ 3U,10U },{ 4099U,11U },{ 8195U,13U },{ 4U,14U },{ 5U,15U },{ 4101U,16U },{ 8197U,17U },{ 12293U,18U },{ 16389U,19U },{ 20485U,20U },{ 6U,21U },{ 4102U,23U },{ 8198U,25U },{ 12294U,27U },{ 16390U,29U },{ 20486U,31U },{ 7U,33U },{ 8U,34U },{ 9U,34U },{ 10U,50U },{ 11U,50U },{ 12U,66U },{ 4108U,67U },{ 13U,68U },{ 14U,69U },{ 15U,70U },{ 16U,71U },{ 17U,73U },{ 4113U,76U },{ 8209U,79U },{ 12305U,82U },{ 16401U,76U },{ 20497U,79U },{ 24593U,82U },{ 32785U,76U },{ 36881U,79U },{ 40977U,82U },{ 18U,157U },{ 4114U,171U },{ 8210U,185U },{ 12306U,199U },{ 16402U,157U },{ 20498U,171U },{ 24594U,185U },{ 28690U,199U },{ 19U,228U },{ 4115U,229U },{ 20U,230U },{ 21U,231U },{ 22U,232U },{ 23U,234U },{ 24U,245U },{ 4120U,246U },{ 8216U,247U },{ 25U,249U },{ 26U,975U },{ 27U,1010U },{ 28U,1022U },{ 29U,1034U },{ 30U,1040U },{ 31U,1043U },{ 4127U,1041U },{ 8223U,1042U },{ 32U,1043U },{ 33U,1053U },{ 34U,1061U },{ 35U,1083U },{ 4131U,1084U },{ 8227U,1085U },{ 12323U,1086U },{ 16419U,1087U },{ 20515U,1088U },{ 24611U,1089U },{ 28707U,1090U },{ 32803U,1091U },{ 36899U,1092U },{ 40995U,1093U },{ 45091U,1094U },{ 49187U,1095U },{ 53283U,1096U },{ 57379U,1097U },{ 61475U,1098U },{ 37U,1111U },{ 38U,1112U },{ 4134U,1113U },{ 8230U,1114U },{ 12326U,1115U },{ 16422U,1116U },{ 20518U,1117U },{ 24614U,1118U },{ 28710U,1119U },{ 32806U,1120U },{ 39U,1121U },{ 40U,1122U },{ 41U,1123U },{ 42U,1124U },{ 43U,7296U },{ 4139U,7302U },{ 8235U,7260U },{ 12331U,7314U },{ 16427U,7320U },{ 20523U,7326U },{ 24619U,7332U },{ 28715U,7338U },{ 32811U,7353U },{ 44U,7296U },{ 4140U,7302U },{ 8236U,7296U },{ 12332U,7314U },{ 16428U,7320U },{ 20524U,7326U },{ 24620U,7332U },{ 28716U,7338U },{ 45U,1125U },{ 46U,1126U },{ 47U,1127U },{ 48U,1128U },{ 49U,1129U },{ 50U,1130U },{ 51U,1166U },{ 52U,1647U },{ 53U,1659U },{ 54U,1729U },{ 55U,2912U },{ 56U,3048U },{ 57U,3049U },{ 58U,3050U },{ 59U,3051U },{ 60U,3059U },{ 61U,3068U },{ 62U,3068U },{ 63U,3076U },{ 64U,3118U },{ 65U,3172U },{ 66U,3179U },{ 67U,3200U },{ 68U,3270U },{ 69U,3286U },{ 70U,3302U },{ 71U,3314U },{ 72U,3368U },{ 73U,3380U },{ 74U,3380U },{ 75U,3381U },{ 76U,3381U },{ 77U,3400U },{ 78U,3415U },{ 79U,3423U },{ 80U,3424U },{ 81U,3425U },{ 82U,3441U },{ 83U,3442U },{ 84U,3459U },{ 85U,3491U },{ 86U,3492U },{ 87U,3493U },{ 88U,3494U },{ 89U,3495U },{ 90U,3496U },{ 91U,3502U },{ 92U,3506U },{ 93U,3516U },{ 94U,3516U },{ 95U,3577U },{ 4191U,3578U },{ 8287U,3579U },{ 12383U,3580U },{ 16479U,3581U },{ 20575U,3582U },{ 24671U,3583U },{ 28767U,3584U },{ 32863U,3585U },{ 36959U,3586U },{ 41055U,3587U },{ 45151U,3588U },{ 49247U,3589U },{ 53343U,3590U },{ 57439U,3591U },{ 61535U,3592U },{ 96U,3608U },{ 97U,3977U },{ 4193U,3978U },{ 8289U,3979U },{ 12385U,3980U },{ 16481U,3981U },{ 20577U,3982U },{ 98U,3983U },{ 4194U,3984U },{ 8290U,3985U },{ 12386U,3986U },{ 99U,3987U },{ 100U,4051U },{ 101U,4210U },{ 102U,4242U },{ 103U,4243U },{ 104U,4252U },{ 105U,4260U },{ 106U,4299U },{ 107U,4307U },{ 108U,4343U },{ 109U,4423U },{ 110U,4493U },{ 111U,4494U },{ 112U,4495U },{ 113U,4527U },{ 114U,4539U },{ 115U,4539U },{ 116U,4612U },{ 117U,4620U },{ 118U,4621U },{ 119U,4625U },{ 120U,4630U },{ 121U,4634U },{ 122U,4635U },{ 123U,4637U },{ 124U,4637U },{ 125U,7260U },{ 4221U,7266U },{ 8317U,7272U },{ 12413U,7278U },{ 16509U,7284U },{ 20605U,7290U },{ 126U,7260U },{ 4222U,7266U },{ 8318U,7272U },{ 12414U,7278U },{ 16510U,7284U },{ 20606U,7290U },{ 32894U,7260U },{ 36990U,7266U },{ 41086U,7272U },{ 45182U,7278U },{ 49278U,7284U },{ 53374U,7290U },{ 127U,4638U },{ 128U,4661U },{ 129U,4730U },{ 130U,4732U },{ 131U,4748U },{ 132U,4882U },{ 133U,4883U },{ 134U,4895U },{ 135U,4975U },{ 136U,5055U },{ 137U,5130U },{ 138U,5136U },{ 139U,5196U },{ 4235U,5260U },{ 140U,5265U },{ 141U,5287U },{ 142U,5295U },{ 143U,5312U },{ 144U,5451U },{ 145U,5567U },{ 4241U,5571U },{ 8337U,5575U },{ 146U,5580U },{ 147U,5603U },{ 148U,5619U },{ 149U,5636U },{ 150U,5636U },{ 151U,5667U },{ 152U,5683U },{ 153U,5684U },{ 154U,5685U },{ 155U,5695U },{ 4251U,5696U },{ 8347U,5698U },{ 156U,5711U },{ 157U,5786U },{ 158U,5793U },{ 159U,5804U },{ 4255U,5805U },{ 8351U,5806U },{ 12447U,5807U },{ 16543U,5808U },{ 20639U,5809U },{ 24735U,5810U },{ 28831U,5811U },{ 32927U,5812U },{ 37023U,5813U },{ 41119U,5814U },{ 45215U,5815U },{ 49311U,5816U },{ 53407U,5817U },{ 57503U,5818U },{ 61599U,5819U },{ 160U,5851U },{ 4256U,5883U },{ 8352U,5915U },{ 12448U,5947U },{ 16544U,5979U },{ 20640U,6011U },{ 24736U,6043U },{ 28832U,6075U },{ 32928U,6107U },{ 37024U,6139U },{ 41120U,6171U },{ 45216U,6203U },{ 49312U,6235U },{ 53408U,6267U },{ 57504U,6299U },{ 61600U,6331U },{ 161U,213U },{ 4257U,227U },{ 16545U,213U },{ 20641U,227U },{ 162U,85U },{ 4258U,88U },{ 16546U,85U },{ 20642U,88U },{ 32930U,85U },{ 37026U,88U },{ 163U,6343U },{ 164U,6423U },{ 165U,6492U },{ 166U,6493U },{ 167U,6509U },{ 168U,6558U },{ 4264U,6559U },{ 8360U,6560U },{ 169U,6819U },{ 170U,6821U },{ 171U,6823U },{ 4267U,6824U },{ 8363U,6825U },{ 12459U,6826U },{ 16555U,6827U },{ 20651U,6828U },{ 24747U,6829U },{ 28843U,6830U },{ 32939U,6831U },{ 37035U,6832U },{ 41131U,6833U },{ 45227U,6834U },{ 49323U,6835U },{ 53419U,6836U },{ 57515U,6837U },{ 61611U,6838U },{ 172U,6839U },{ 173U,6840U },{ 174U,6841U },{ 175U,6843U },{ 4271U,6845U },{ 8367U,6851U },{ 12463U,6853U },{ 16559U,6847U },{ 20655U,6849U },{ 176U,6854U },{ 177U,6854U },{ 178U,5667U },{ 179U,7174U },{ 4275U,7175U },{ 8371U,7176U },{ 180U,7188U },{ 181U,7344U },{ 182U,7344U },{ 183U,7364U },{ 184U,7396U },{ 185U,7428U },{ 186U,7492U },{ 187U,7460U },{ 188U,7548U },{ 189U,7580U },{ 190U,7612U },{ 191U,7676U },{ 192U,7644U },{ 193U,7688U },{ 194U,7752U },{ 195U,7816U },{ 196U,7880U },{ 197U,7944U },{ 198U,8001U },{ 199U,8066U },{ 200U,8067U },{ 201U,8073U },{ 202U,8075U },{ 203U,8088U },{ 204U,7350U },{ 205U,7350U },{ 206U,8157U },{ 207U,8158U },{ 208U,8162U },{ 209U,8163U },{ 210U,8170U },{ 211U,8182U },{ 212U,8188U },{ 213U,8192U },{ 214U,8193U },{ 215U,8194U },{ 216U,8196U },{ 217U,8198U },{ 218U,8204U },{ 219U,8221U },{ 220U,8227U },{ 221U,8233U },{ 222U,8239U },{ 223U,8245U },{ 224U,8251U },{ 225U,8257U },{ 226U,8263U },{ 227U,8269U },{ 228U,8275U },{ 229U,8281U },{ 230U,8287U },{ 231U,8293U },{ 232U,8299U },{ 233U,8305U },{ 234U,8311U },{ 235U,8313U },{ 236U,8317U },{ 237U,8321U },{ 238U,8325U },{ 239U,8329U },{ 240U,8333U },{ 241U,8337U },{ 242U,8341U },{ 243U,8345U },{ 244U,8349U },{ 245U,8353U },{ 246U,8357U },{ 247U,8361U },{ 248U,8365U },{ 249U,8369U },{ 250U,8373U },{ 251U,8377U },{ 4347U,8378U },{ 8443U,8379U },{ 12539U,8380U },{ 16635U,8381U },{ 20731U,8382U },{ 24827U,8383U },{ 28923U,8384U },{ 33019U,8385U },{ 37115U,8386U },{ 41211U,8387U },{ 45307U,8388U },{ 49403U,8389U },{ 53499U,8390U },{ 57595U,8391U },{ 61691U,8392U },{ 252U,8393U },{ 4348U,8394U },{ 8444U,8395U },{ 12540U,8396U },{ 16636U,8397U },{ 20732U,8398U },{ 24828U,8399U },{ 28924U,8400U },{ 33020U,8401U },{ 37116U,8402U },{ 41212U,8403U },{ 45308U,8404U },{ 49404U,8405U },{ 53500U,8406U },{ 57596U,8407U },{ 61692U,8408U },{ 255U,8578U } };

void buildTree(std::vector<std::string>& strVec, const json jState, Tree<std::string, uint16_t>& tree) {
	for (auto itr = jState.begin(); itr != jState.end(); ++itr) {
		if (itr->is_primitive()) {
			uint16_t val = itr.value();
			tree.add(strVec, itr.key(), val);
		}
		else {
			strVec.push_back(itr.key());
			buildTree(strVec, *itr, tree);
			strVec.pop_back();
		}
	}
}

void loadBlockTree(const std::string& path)
{
	json jData;
	try {
		std::ifstream i(path); //res/compressBlock.json
		i >> jData;
		i.close();
	}
	catch (nlohmann::json::parse_error e) {
		std::cerr << e.what() << std::endl;
		return;
	}

	for (auto block = jData.begin(); block != jData.end(); ++block) {
		const std::string name = block.key();
		Tree<std::string, uint16_t> tree;
		const json jOrder = (*block)["order"];
		if (!jOrder.empty()) {
			tree.setOrder(jOrder);

			json jStates = (*block)["states"];
			std::vector<std::string> vec;
			buildTree(vec, jStates, tree);
		}
		else {
			tree.add((*block)["states"][""]);
		}

		blockTree[name] = tree;
	}
}

void loadColorMap(const std::string& path)
{
	json jData;
	try {
		std::ifstream i(path); //res/compressBlock.json
		i >> jData;
		i.close();
	}
	catch (nlohmann::json::parse_error e) {
		std::cerr << e.what() << std::endl;
		return;
	}

	for (const auto& col : jData) {
		uint16_t from = col["from"];
		uint16_t to = col["to"];
		const json color = col["color"];
		uint8_t r, g, b, a, noise, blockType;
		r = color["r"];
		g = color["g"];
		b = color["b"];
		a = color["a"];
		noise = color["n"];
		blockType = col["blockType"];
		uint8_t brightness = (uint8_t)sqrt(double(r) *  double(r) * .236 + double(g) *  double(g) * .601 + double(b) * double(b) * .163);

		Color_t finalCol{ r, g, b, a, noise, brightness, blockType };
		colorMap.insert(from, to, finalCol);
	}

	colorMap.balance();
}
