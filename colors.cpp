#include "colors.h"
#include "extractcolors.h"
#include "pngreader.h"
#include "globals.h"
#include <fstream>
#include <iostream>
#include <map>
#include "json.hpp"

using nlohmann::json;

std::map<std::string, Tree<std::string, uint16_t>> blockTree; //Maps blockState to id
RangeMap<uint16_t, Color_t> colorMap; //maps id to color_t
//This beast maps old blockid:meta to new states to save them in terrain array
const std::map<uint16_t, uint16_t> metaToState { { 0U,0 },{ 1U,1 },{ 4097U,2 },{ 8193U,3 },{ 12289U,4 },{ 16385U,5 },{ 20481U,6 },{ 24577U,7 },{ 2U,9 },{ 3U,10 },{ 4099U,11 },{ 8195U,13 },{ 4U,14 },{ 5U,15 },{ 4101U,16 },{ 8197U,17 },{ 12293U,18 },{ 16389U,19 },{ 20485U,20 },{ 6U,21 },{ 4102U,23 },{ 8198U,25 },{ 12294U,27 },{ 16390U,29 },{ 20486U,31 },{ 7U,33 },{ 8U,34 },{ 9U,34 },{ 10U,50 },{ 11U,50 },{ 12U,66 },{ 4108U,67 },{ 13U,68 },{ 14U,69 },{ 15U,70 },{ 16U,71 },{ 17U,73 },{ 4113U,76 },{ 8209U,79 },{ 12305U,82 },{ 18U,157 },{ 4114U,171 },{ 8210U,185 },{ 12306U,199 },{ 19U,228 },{ 4115U,229 },{ 20U,230 },{ 21U,231 },{ 22U,232 },{ 23U,234 },{ 24U,245 },{ 4120U,246 },{ 8216U,247 },{ 25U,249 },{ 26U,975 },{ 27U,1010 },{ 28U,1022 },{ 29U,1034 },{ 30U,1040 },{ 31U,1041 },{ 4127U,1041 },{ 8223U,1042 },{ 32U,1043 },{ 33U,1053 },{ 34U,1061 },{ 35U,1083 },{ 4131U,1084 },{ 8227U,1085 },{ 12323U,1086 },{ 16419U,1087 },{ 20515U,1088 },{ 24611U,1089 },{ 28707U,1090 },{ 32803U,1091 },{ 36899U,1092 },{ 40995U,1093 },{ 45091U,1094 },{ 49187U,1095 },{ 53283U,1096 },{ 57379U,1097 },{ 61475U,1098 },{ 37U,1111 },{ 38U,1112 },{ 4134U,1113 },{ 8230U,1114 },{ 12326U,1115 },{ 16422U,1116 },{ 20518U,1117 },{ 24614U,1118 },{ 28710U,1119 },{ 32806U,1120 },{ 39U,1121 },{ 40U,1122 },{ 41U,1123 },{ 42U,1124 },{ 43U,7296 },{ 4139U,7296 },{ 8235U,7260 },{ 12331U,7296 },{ 16427U,7296 },{ 20523U,7296 },{ 24619U,7296 },{ 28715U,7355 },{ 32811U,7353 },{ 44U,7296 },{ 4140U,7302 },{ 8236U,7296 },{ 12332U,7314 },{ 16428U,7320 },{ 20524U,7326 },{ 24620U,7332 },{ 28716U,7338 },{ 45U,1125 },{ 46U,1126 },{ 47U,1127 },{ 48U,1128 },{ 49U,1129 },{ 50U,1130 },{ 51U,1166 },{ 52U,1647 },{ 53U,1659 },{ 54U,1729 },{ 55U,2912 },{ 56U,3048 },{ 57U,3049 },{ 58U,3050 },{ 59U,3051 },{ 60U,3059 },{ 61U,3068 },{ 62U,3068 },{ 63U,3076 },{ 64U,3118 },{ 65U,3172 },{ 66U,3179 },{ 67U,3200 },{ 68U,3270 },{ 69U,3286 },{ 70U,3302 },{ 71U,3314 },{ 72U,3368 },{ 73U,3380 },{ 74U,3380 },{ 75U,3381 },{ 76U,3381 },{ 77U,3400 },{ 78U,3415 },{ 79U,3423 },{ 80U,3424 },{ 81U,3425 },{ 82U,3441 },{ 83U,3442 },{ 84U,3459 },{ 85U,3491 },{ 86U,3492 },{ 87U,3493 },{ 88U,3494 },{ 89U,3495 },{ 90U,3496 },{ 91U,3502 },{ 92U,3506 },{ 93U,3516 },{ 94U,3516 },{ 95U,3577 },{ 4191U,3578 },{ 8287U,3579 },{ 12383U,3580 },{ 16479U,3581 },{ 20575U,3582 },{ 24671U,3583 },{ 28767U,3584 },{ 32863U,3585 },{ 36959U,3586 },{ 41055U,3587 },{ 45151U,3588 },{ 49247U,3589 },{ 53343U,3590 },{ 57439U,3591 },{ 61535U,3592 },{ 96U,3608 },{ 97U,3977 },{ 4193U,3978 },{ 8289U,3979 },{ 12385U,3980 },{ 16481U,3981 },{ 20577U,3982 },{ 98U,3983 },{ 4194U,3984 },{ 8290U,3985 },{ 12386U,3986 },{ 99U,3987 },{ 100U,4051 },{ 101U,4210 },{ 102U,4242 },{ 103U,4243 },{ 104U,4252 },{ 105U,4260 },{ 106U,4299 },{ 107U,4307 },{ 108U,4343 },{ 109U,4423 },{ 110U,4493 },{ 111U,4494 },{ 112U,4495 },{ 113U,4527 },{ 114U,4539 },{ 115U,4539 },{ 116U,4612 },{ 117U,4620 },{ 118U,4621 },{ 119U,4625 },{ 120U,4630 },{ 121U,4634 },{ 122U,4635 },{ 123U,4637 },{ 124U,4637 },{ 125U,7260 },{ 4221U,7260 },{ 8317U,7260 },{ 12413U,7260 },{ 16509U,7260 },{ 20605U,7260 },{ 126U,7260 },{ 4222U,7266 },{ 8318U,7272 },{ 12414U,7278 },{ 16510U,7284 },{ 20606U,7290 },{ 127U,4638 },{ 128U,4661 },{ 129U,4730 },{ 130U,4732 },{ 131U,4748 },{ 132U,4882 },{ 133U,4883 },{ 134U,4895 },{ 135U,4975 },{ 136U,5055 },{ 137U,5130 },{ 138U,5136 },{ 139U,5196 },{ 4235U,5260 },{ 140U,5265 },{ 141U,5287 },{ 142U,5295 },{ 143U,5312 },{ 144U,5447 },{ 145U,5567 },{ 4241U,5571 },{ 8337U,5575 },{ 146U,5580 },{ 147U,5603 },{ 148U,5619 },{ 149U,5636 },{ 150U,5636 },{ 151U,5667 },{ 152U,5683 },{ 153U,5684 },{ 154U,5685 },{ 155U,5695 },{ 4251U,5696 },{ 8347U,5698 },{ 156U,5711 },{ 157U,5786 },{ 158U,5793 },{ 159U,5804 },{ 4255U,5805 },{ 8351U,5806 },{ 12447U,5807 },{ 16543U,5808 },{ 20639U,5809 },{ 24735U,5810 },{ 28831U,5811 },{ 32927U,5812 },{ 37023U,5813 },{ 41119U,5814 },{ 45215U,5815 },{ 49311U,5816 },{ 53407U,5817 },{ 57503U,5818 },{ 61599U,5819 },{ 160U,5851 },{ 4256U,5883 },{ 8352U,5915 },{ 12448U,5947 },{ 16544U,5979 },{ 20640U,6011 },{ 24736U,6043 },{ 28832U,6075 },{ 32928U,6107 },{ 37024U,6139 },{ 41120U,6171 },{ 45216U,6203 },{ 49312U,6235 },{ 53408U,6267 },{ 57504U,6299 },{ 61600U,6331 },{ 161U,213 },{ 4257U,227 },{ 162U,85 },{ 4258U,88 },{ 163U,6343 },{ 164U,6423 },{ 165U,6492 },{ 166U,6493 },{ 167U,6509 },{ 168U,6558 },{ 4264U,6559 },{ 8360U,6560 },{ 169U,6819 },{ 170U,6821 },{ 171U,6823 },{ 4267U,6824 },{ 8363U,6825 },{ 12459U,6826 },{ 16555U,6827 },{ 20651U,6828 },{ 24747U,6829 },{ 28843U,6830 },{ 32939U,6831 },{ 37035U,6832 },{ 41131U,6833 },{ 45227U,6834 },{ 49323U,6835 },{ 53419U,6836 },{ 57515U,6837 },{ 61611U,6838 },{ 172U,6839 },{ 173U,6840 },{ 174U,6841 },{ 175U,6843 },{ 4271U,6845 },{ 8367U,6851 },{ 12463U,6853 },{ 16559U,6847 },{ 20655U,6849 },{ 176U,7078 },{ 177U,7078 },{ 178U,5667 },{ 179U,7174 },{ 4275U,7175 },{ 8371U,7176 },{ 180U,7188 },{ 181U,7302 },{ 182U,7344 },{ 183U,7364 },{ 184U,7396 },{ 185U,7428 },{ 186U,7492 },{ 187U,7460 },{ 188U,7548 },{ 189U,7580 },{ 190U,7612 },{ 191U,7676 },{ 192U,7644 },{ 193U,7688 },{ 194U,7752 },{ 195U,7816 },{ 196U,7880 },{ 197U,7944 },{ 198U,8001 },{ 199U,8066 },{ 200U,8067 },{ 201U,8073 },{ 202U,8075 },{ 203U,8088 },{ 204U,7350 },{ 205U,7350 },{ 206U,8157 },{ 207U,8158 },{ 208U,8162 },{ 209U,8163 },{ 210U,8170 },{ 211U,8182 },{ 212U,8188 },{ 213U,8192 },{ 214U,8193 },{ 215U,8194 },{ 216U,8196 },{ 217U,8198 },{ 218U,8204 },{ 219U,8221 },{ 220U,8227 },{ 221U,8233 },{ 222U,8239 },{ 223U,8245 },{ 224U,8251 },{ 225U,8257 },{ 226U,8263 },{ 227U,8269 },{ 228U,8275 },{ 229U,8281 },{ 230U,8287 },{ 231U,8293 },{ 232U,8299 },{ 233U,8305 },{ 234U,8311 },{ 235U,8313 },{ 236U,8317 },{ 237U,8321 },{ 238U,8325 },{ 239U,8329 },{ 240U,8333 },{ 241U,8337 },{ 242U,8341 },{ 243U,8345 },{ 244U,8349 },{ 245U,8353 },{ 246U,8357 },{ 247U,8361 },{ 248U,8365 },{ 249U,8369 },{ 250U,8373 },{ 251U,8377 },{ 4347U,8378 },{ 8443U,8379 },{ 12539U,8380 },{ 16635U,8381 },{ 20731U,8382 },{ 24827U,8383 },{ 28923U,8384 },{ 33019U,8385 },{ 37115U,8386 },{ 41211U,8387 },{ 45307U,8388 },{ 49403U,8389 },{ 53499U,8390 },{ 57595U,8391 },{ 61691U,8392 },{ 252U,8393 },{ 4348U,8394 },{ 8444U,8395 },{ 12540U,8396 },{ 16636U,8397 },{ 20732U,8398 },{ 24828U,8399 },{ 28924U,8400 },{ 33020U,8401 },{ 37116U,8402 },{ 41212U,8403 },{ 45308U,8404 },{ 49404U,8405 },{ 53500U,8406 },{ 57596U,8407 },{ 61692U,8408 },{ 255U,8498 } };

void buildTree(std::vector<std::string>& strVec, const json jState, Tree<std::string, uint16_t>& tree) {
	for (auto itr = jState.begin(); itr != jState.end(); ++itr) {
		if (itr->is_primitive()) {
			uint16_t val = itr.value();
			tree.add(strVec, itr.key(), val);
		}
		else {
			strVec.push_back(itr.key());
			buildTree(strVec, *itr, tree);
			strVec.pop_back();
		}
	}
}

void loadBlockTree(const std::string& path)
{
	json jData;
	try {
		std::ifstream i(path); //res/compressBlock.json
		i >> jData;
		i.close();
	}
	catch (nlohmann::json::parse_error e) {
		std::cerr << e.what() << std::endl;
		return;
	}

	for (auto block = jData.begin(); block != jData.end(); ++block) {
		const std::string name = block.key();
		Tree<std::string, uint16_t> tree;
		const json jOrder = (*block)["order"];
		if (!jOrder.empty()) {
			tree.setOrder(jOrder);

			json jStates = (*block)["states"];
			std::vector<std::string> vec;
			buildTree(vec, jStates, tree);
		}
		else {
			tree.add((*block)["states"][""]);
		}

		blockTree[name] = tree;
	}
}

void loadColorMap(const std::string& path)
{
	json jData;
	try {
		std::ifstream i(path); //res/compressBlock.json
		i >> jData;
		i.close();
	}
	catch (nlohmann::json::parse_error e) {
		std::cerr << e.what() << std::endl;
		return;
	}

	for (const auto& col : jData) {
		uint16_t from = col["from"];
		uint16_t to = col["to"];
		const json color = col["color"];
		uint8_t r, g, b, a, noise, blockType;
		r = color["r"];
		g = color["g"];
		b = color["b"];
		a = color["a"];
		noise = color["n"];
		blockType = col["blockType"];
		uint8_t brightness = (uint8_t)sqrt(double(r) *  double(r) * .236 + double(g) *  double(g) * .601 + double(b) * double(b) * .163);

		Color_t finalCol{ r, g, b, a, noise, brightness, blockType };
		colorMap.insert(from, to, finalCol);
	}

	colorMap.balance();
}
